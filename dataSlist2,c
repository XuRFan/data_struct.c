# data_struct.c
#include"data.h"
int  BuySlistNode(SlistDatatype x)//开辟节点
{
	SlistNode* newNode = (SlistNode*)malloc(sizeof(SlistNode));//动态开辟一个数字的空间可以根据需求设置
	if (newNode == NULL)
	{
		printf("申请失败\n");
		exit(-1);
	}
	newNode->data = x;//数据
	newNode->next = NULL;//下一个数字的地址置空
	return newNode;
}

void Slistpushback(SlistNode** pphead, SlistDatatype x)
{
	
	
	if (*pphead == NULL)//首次录入值之前是空指针
	{
		SlistNode* newNode = BuySlistNode(x);//开辟空间赋值给空指针
		*pphead = newNode;
	}
	else//如果
	{

		SlistNode* tail = *pphead;//如果存在就执行找尾
		while (tail->next != NULL)
		{
			tail = tail->next;//不断寻找下一个数字的地址直到停止
		}
		SlistNode* newNode = BuySlistNode(x);//正向输出
		tail->next = newNode;//将newNode的地址给结尾处
	}
		
}
void Slistpopback(SlistNode** pphead)//删除
{
	if (*pphead == NULL)//空类型
	{
		return 0;
	}
	else if ((*pphead)->next == NULL)//一个节点
	{
		free(*pphead);
		*pphead = NULL;
	}
	else//多个节点
	{
		SlistNode* pre = NULL;
		SlistNode* tail = *pphead;
		while (tail->next != NULL)
		{
			pre = tail;
			tail = tail->next;
		}
		free(tail);
		tail = NULL;
		pre->next = NULL;
	}
}
void Slistpushfront(SlistNode** pphead, SlistDatatype x)//逆向输出
{
	SlistNode* newNode = BuySlistNode(x);
	newNode->next = *pphead;
	*pphead = newNode;
}
void Slistprint(SlistNode* phead)
{
	SlistNode* cur = phead;
	while (cur != NULL)
	{
		printf("%d->", cur->data);//将执行完之后的程序进行打印
		cur = cur->next;//每次打印都进行链式指向另一个地址
	}
	printf("NULL");
	printf("\n");
}
SlistNode *SlistFind(SlistNode*phead, SlistDatatype x)//查找功能
{
	SlistNode*cur= phead;
	while (cur)
	{
		if (cur->data == x)
		{
			return cur;
		}
		cur = cur->next;
	}
	return NULL;
}void SlistInsertAfter(SlistNode* pos, SlistDatatype x)//插入值
{
	SlistNode* newNode = BuySlistNode(x);
	newNode->next = pos->next;
	pos->next = newNode;
}
void SlistDelAfter(SlistNode* pos)//删除
{
	if (pos->next)
	{
		SlistNode* next = pos->next;
		SlistNode* nextnext = next->next;
		pos->next = nextnext;
		free(next);
	}
}
